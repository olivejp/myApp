import {ColumnDefinition} from './column-definition';

function getSqlCreate(columns: Map<string, ColumnDefinition>, tableName: string): string {
    let sqlCreate = 'CREATE TABLE ' + tableName + ' (';
    for (const entry of columns.entries()) {
        const value: ColumnDefinition = entry[1];
        sqlCreate += value.name + ' ' + value.type;
        sqlCreate += (value.primary) ? ' PRIMARY KEY' : '';
        sqlCreate += (value.autoGenerated) ? ' AUTOINCREMENT' : '';
        sqlCreate += (value.notNull) ? ' NOT NULL' : '';
        sqlCreate += (value.unique) ? ' UNIQUE' : '';
        sqlCreate += ', ';
    }
    sqlCreate = sqlCreate.substring(0, sqlCreate.length - 2);
    sqlCreate += ');';
    console.log(sqlCreate);
    return sqlCreate;
}

/**
 * Function used as an Decorator on class.
 * @param tableName: string, name of the table that we want to create.
 */
export function Entity(tableName: string): any {
    return (target) => {

        // Add property `tableName` in the Entity prototype.
        if (!target.prototype[`tableName`]) {
            target.prototype[`tableName`] = tableName;
        }

        // Add property `isEntity` to true in the prototype
        if (!target.prototype[`isEntity`]) {
            target.prototype[`isEntity`] = true;
        }

        const sqlCreate: string = getSqlCreate(target.prototype[`columns`], tableName);

        // Add a method to retrieve the table name
        Object.assign(target.prototype, {
            getTableName(): string {
                return tableName;
            },
            getCreateSql(): string {
                return sqlCreate;
            },
        });
    };
}
