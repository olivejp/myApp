import * as tslib_1 from "tslib";
import { Column } from '../technical/orm/column.decorator';
import { SQLiteType } from '../technical/orm/sqlite-type';
import { Entity } from '../technical/orm/entity.decorator';
export var TypeDistribution;
(function (TypeDistribution) {
    TypeDistribution["DISTRIBUTION"] = "DISTRIBUTION";
    TypeDistribution["NON_DISTRIBUTION"] = "NON_DISTRIBUTION";
})(TypeDistribution || (TypeDistribution = {}));
let DistributionLddEntity = class DistributionLddEntity {
};
tslib_1.__decorate([
    Column({ name: 'id', type: SQLiteType.INTEGER, comment: 'Id de la LDD', primary: true, autoGenerated: true }),
    tslib_1.__metadata("design:type", Number)
], DistributionLddEntity.prototype, "id", void 0);
tslib_1.__decorate([
    Column({
        name: 'date_creation',
        type: SQLiteType.TEXT,
        comment: 'Date de la création au format YYYY-MM-DD HH:MM:SS'
    }),
    tslib_1.__metadata("design:type", String)
], DistributionLddEntity.prototype, "dateCreation", void 0);
tslib_1.__decorate([
    Column({
        name: 'date_distribution',
        type: SQLiteType.TEXT,
        comment: 'Date de distribution au format YYYY-MM-DD HH:MM:SS'
    }),
    tslib_1.__metadata("design:type", String)
], DistributionLddEntity.prototype, "dateDistribution", void 0);
tslib_1.__decorate([
    Column({ name: 'ldd', type: SQLiteType.INTEGER, comment: 'Id de la LDD' }),
    tslib_1.__metadata("design:type", Number)
], DistributionLddEntity.prototype, "ldd", void 0);
tslib_1.__decorate([
    Column({
        name: 'code_barre',
        type: SQLiteType.TEXT,
        length: 13,
        comment: 'Code à barre de l\'objet',
        notNull: true
    }),
    tslib_1.__metadata("design:type", String)
], DistributionLddEntity.prototype, "codeBarre", void 0);
tslib_1.__decorate([
    Column({ name: 'statut', type: SQLiteType.TEXT, comment: 'Statut général de la distribution' }),
    tslib_1.__metadata("design:type", String)
], DistributionLddEntity.prototype, "statut", void 0);
tslib_1.__decorate([
    Column({ name: 'synced', type: SQLiteType.TEXT, length: 1, comment: 'O/N si la synchronisation a été faite' }),
    tslib_1.__metadata("design:type", String)
], DistributionLddEntity.prototype, "synced", void 0);
tslib_1.__decorate([
    Column({
        name: 'path_signature',
        type: SQLiteType.TEXT,
        comment: 'Path local du device pour l\'image de la signature'
    }),
    tslib_1.__metadata("design:type", String)
], DistributionLddEntity.prototype, "pathSignature", void 0);
tslib_1.__decorate([
    Column({
        name: 'type_distribution',
        type: SQLiteType.TEXT,
        length: 25,
        comment: 'DISTRIBUTION ou NON_DISTRIBUTION'
    }),
    tslib_1.__metadata("design:type", String)
], DistributionLddEntity.prototype, "typeDistribution", void 0);
DistributionLddEntity = tslib_1.__decorate([
    Entity('element_ldd')
], DistributionLddEntity);
export { DistributionLddEntity };
//# sourceMappingURL=distribution-ldd.entity.js.map